// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UrlMiniAcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class UrlCodecFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UrlCodec.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UrlCodec", "\tIn order shortenUrls\r\n\tAs a hosted Azure Service\r\n\tI want to be able to convert " +
                    "between URLs and short-codes", ProgrammingLanguage.CSharp, new string[] {
                        "ApiAcceptanceTests"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "UrlCodec")))
            {
                UrlMiniAcceptanceTests.Features.UrlCodecFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void UrlsCanBeEncodedIntoShort_Codes(string url, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "HappyPath"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Urls Can be encoded into short-codes", @__tags);
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given(string.Format("A user wants to encode the URL: \'{0}\'", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.When("the requesting service submits a POST request to encode the URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("the codec service returns a code and \'Success\' status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Urls Can be encoded into short-codes: https://home.stevenfarnell.net/<TIMESTAMP>")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "https://home.stevenfarnell.net/<TIMESTAMP>")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:url", "https://home.stevenfarnell.net/<TIMESTAMP>")]
        public virtual void UrlsCanBeEncodedIntoShort_Codes_HttpsHome_Stevenfarnell_NetTIMESTAMP()
        {
            this.UrlsCanBeEncodedIntoShort_Codes("https://home.stevenfarnell.net/<TIMESTAMP>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Urls Can be encoded into short-codes: https://www.google.com/webhp?sourceid=chrom" +
            "e-instant&ion=1&espv=2&es_th=1&ie=UTF-8#q=test%20search%20terms%20<TIMESTAMP>")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&es_th=1&ie=UTF-" +
            "8#q=test%20search%20terms%20<TIMESTAMP>")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:url", "https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&es_th=1&ie=UTF-" +
            "8#q=test%20search%20terms%20<TIMESTAMP>")]
        public virtual void UrlsCanBeEncodedIntoShort_Codes_HttpsWww_Google_ComWebhpSourceidChrome_InstantIon1Espv2Es_Th1IeUTF_8QTest20Search20Terms20TIMESTAMP()
        {
            this.UrlsCanBeEncodedIntoShort_Codes("https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&es_th=1&ie=UTF-" +
                    "8#q=test%20search%20terms%20<TIMESTAMP>", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes can be converted back into URLs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("HappyPath")]
        public virtual void Short_CodesCanBeConvertedBackIntoURLs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("short-codes can be converted back into URLs", new string[] {
                        "HappyPath"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("A user wants to retrieve a URL from a \'1y5a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("the requesting service submits a GET request is send for the short-code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("the codec service returns the URL \'home.stevenfarnell.net\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that don\'t exist return NotFound")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        public virtual void Short_CodesThatDonTExistReturnNotFound()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("short-codes that don\'t exist return NotFound", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("A user wants to retrieve a URL from a \'za1y5a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When("the requesting service submits a GET request is send for the short-code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("the codec service returns the URL \'NotFound\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void Short_CodesThatAreInvalidReturnNotFoundPage(string code, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("short-codes that are invalid return NotFound Page", exampleTags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given(string.Format("A user wants to retrieve a URL from a \'{0}\'", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When("the requesting service submits a GET request is send for the short-code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the codec service returns the URL \'NotFound\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that are invalid return NotFound Page: ag4j!")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ag4j!")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "ag4j!")]
        public virtual void Short_CodesThatAreInvalidReturnNotFoundPage_Ag4J()
        {
            this.Short_CodesThatAreInvalidReturnNotFoundPage("ag4j!", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that are invalid return NotFound Page: asd-b")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "asd-b")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "asd-b")]
        public virtual void Short_CodesThatAreInvalidReturnNotFoundPage_Asd_B()
        {
            this.Short_CodesThatAreInvalidReturnNotFoundPage("asd-b", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that are invalid return NotFound Page: zzzA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzzA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "zzzA")]
        public virtual void Short_CodesThatAreInvalidReturnNotFoundPage_ZzzA()
        {
            this.Short_CodesThatAreInvalidReturnNotFoundPage("zzzA", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that are invalid return NotFound Page: hhh}j")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "hhh}j")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "hhh}j")]
        public virtual void Short_CodesThatAreInvalidReturnNotFoundPage_HhhJ()
        {
            this.Short_CodesThatAreInvalidReturnNotFoundPage("hhh}j", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that are invalid return NotFound Page: aBc3ff")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "aBc3ff")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "aBc3ff")]
        public virtual void Short_CodesThatAreInvalidReturnNotFoundPage_ABc3Ff()
        {
            this.Short_CodesThatAreInvalidReturnNotFoundPage("aBc3ff", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that are invalid return NotFound Page: `fbse")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "`fbse")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "`fbse")]
        public virtual void Short_CodesThatAreInvalidReturnNotFoundPage_Fbse()
        {
            this.Short_CodesThatAreInvalidReturnNotFoundPage("`fbse", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that are invalid return NotFound Page: \'gwno")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\'gwno")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "\'gwno")]
        public virtual void Short_CodesThatAreInvalidReturnNotFoundPage_Gwno()
        {
            this.Short_CodesThatAreInvalidReturnNotFoundPage("\'gwno", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that are invalid return NotFound Page: $bdf")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "$bdf")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "$bdf")]
        public virtual void Short_CodesThatAreInvalidReturnNotFoundPage_Bdf()
        {
            this.Short_CodesThatAreInvalidReturnNotFoundPage("$bdf", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that are invalid return NotFound Page: -bar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "-bar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "-bar")]
        public virtual void Short_CodesThatAreInvalidReturnNotFoundPage_Bar()
        {
            this.Short_CodesThatAreInvalidReturnNotFoundPage("-bar", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that are invalid return NotFound Page: foO")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "foO")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "foO")]
        public virtual void Short_CodesThatAreInvalidReturnNotFoundPage_FoO()
        {
            this.Short_CodesThatAreInvalidReturnNotFoundPage("foO", ((string[])(null)));
#line hidden
        }
        
        public virtual void Short_CodesThatContainEscapeCharactersReturnA405Error(string code, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("short-codes that contain escape characters return a 405 Error", exampleTags);
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given(string.Format("A user wants to retrieve a URL from a \'{0}\'", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.When("the requesting service submits a GET request is send for the short-code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("the codec service returns the URL \'(405) Method Not Allowed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that contain escape characters return a 405 Error: ?hopd")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "?hopd")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "?hopd")]
        public virtual void Short_CodesThatContainEscapeCharactersReturnA405Error_Hopd()
        {
            this.Short_CodesThatContainEscapeCharactersReturnA405Error("?hopd", ((string[])(null)));
#line hidden
        }
        
        public virtual void Short_CodesThatContainSpecialCharactersReturn404Error(string code, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("short-codes that contain special characters return 404 Error", exampleTags);
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given(string.Format("A user wants to retrieve a URL from a \'{0}\'", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
 testRunner.When("the requesting service submits a GET request is send for the short-code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("the codec service returns the URL \'(404) Not Found\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that contain special characters return 404 Error: bs+4d")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "bs+4d")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "bs+4d")]
        public virtual void Short_CodesThatContainSpecialCharactersReturn404Error_Bs4D()
        {
            this.Short_CodesThatContainSpecialCharactersReturn404Error("bs+4d", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that contain special characters return 404 Error: ho/pd")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ho/pd")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "ho/pd")]
        public virtual void Short_CodesThatContainSpecialCharactersReturn404Error_HoPd()
        {
            this.Short_CodesThatContainSpecialCharactersReturn404Error("ho/pd", ((string[])(null)));
#line hidden
        }
        
        public virtual void Short_CodesThatContainSpecialCharactersReturn400Error(string code, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("short-codes that contain special characters return 400 Error", exampleTags);
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given(string.Format("A user wants to retrieve a URL from a \'{0}\'", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
 testRunner.When("the requesting service submits a GET request is send for the short-code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
 testRunner.Then("the codec service returns the URL \'(400) Bad Request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("short-codes that contain special characters return 400 Error: da&fb")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UrlCodec")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ApiAcceptanceTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "da&fb")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:code", "da&fb")]
        public virtual void Short_CodesThatContainSpecialCharactersReturn400Error_DaFb()
        {
            this.Short_CodesThatContainSpecialCharactersReturn400Error("da&fb", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
